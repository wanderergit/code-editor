{"version":3,"sources":["components/LiveView.js","components/FileExplorer.js","components/Main.js","App.js","reportWebVitals.js","index.js"],"names":["LiveView","handleLoad","iframeRoot","node","contentDocument","body","forceUpdate","this","addEventListener","removeEventListener","props","children","code","title","className","srcDoc","ref","ReactDOM","createPortal","Component","FileExplorer","useState","html","setHtml","css","setCss","js","setJs","screenHtml","setScreenHtml","screenCss","setScreenCss","screenJs","setScreenJs","screenShare","setScreenShare","toggleScreens","screen","onClick","PastebinAPI","createPaste","then","data","console","log","fail","err","placeholder","value","onValueChange","highlight","languages","jsx","padding","style","fontFamily","fontSize","color","backgroundColor","require","Main","id","src","alt","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8b9d80b9.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport ReactDOM from 'react-dom'\n\nexport default class LiveView extends Component {\n  componentDidMount() {\n    this.node.addEventListener(\"load\", this.handleLoad);\n  }\n\n  componentWillUnmout() {\n    this.node.removeEventListener(\"load\", this.handleLoad);\n  }\n\n  handleLoad = () => {\n    this.iframeRoot = this.node.contentDocument.body;\n    this.forceUpdate();\n  };\n\n  render() {\n    const { children, code } = this.props;\n    return (\n      <iframe title=\"code\" className='code' srcDoc={`<!DOCTYPE html>${code}`} ref={node => (this.node = node)}>\n        {this.iframeRoot && ReactDOM.createPortal(children, this.iframeRoot)}\n      </iframe>\n    );\n  }\n}\n","import React, { useState } from 'react'\nimport LiveView from './LiveView';\nimport Editor from \"react-simple-code-editor\";\nimport { highlight, languages } from \"prismjs/components/prism-core\";\nimport \"prismjs/components/prism-clike\";\nimport 'prismjs/components/prism-javascript';\nimport 'prismjs/components/prism-markup';\nimport './prism.css';\n\nimport PastebinAPI from 'pastebin-js'\n\nrequire('prismjs/components/prism-jsx');\nrequire('prismjs/components/prism-css');\n\n\nexport default function FileExplorer() {\n\n  const [html, setHtml] = useState('')\n  const [css, setCss] = useState('')\n  const [js, setJs] = useState('')\n  const [screenHtml, setScreenHtml] = useState(true)\n  const [screenCss, setScreenCss] = useState(false)\n  const [screenJs, setScreenJs] = useState(false)\n  const [screenShare, setScreenShare] = useState(false)\n\n  const createPaste = () => {\n    const pastebin = new PastebinAPI('lnR9ZzhZ2oKdtIwAMkWufgeqc3idGx_v');\n\n    pastebin.createPaste(\"Test from pastebin-js\", \"pastebin-js\")\n      .then(function (data) {\n        console.log(data);\n      })\n      .fail(function (err) {\n        console.log(err);\n      })\n  }\n\n  const toggleScreens = (screen) => {\n    if (screen === 'html') {\n      setScreenHtml(true)\n      setScreenCss(false)\n      setScreenJs(false)\n      setScreenShare(false)\n    } else if (screen === 'css') {\n      setScreenHtml(false)\n      setScreenCss(true)\n      setScreenJs(false)\n      setScreenShare(false)\n    } else if (screen === 'js') {\n      setScreenHtml(false)\n      setScreenCss(false)\n      setScreenJs(true)\n      setScreenShare(false)\n    } else if (screen === 'all') {\n      setScreenHtml(true)\n      setScreenCss(true)\n      setScreenJs(true)\n      setScreenShare(false)\n    } else if (screen === 'share') {\n      setScreenHtml(false)\n      setScreenCss(false)\n      setScreenJs(false)\n      setScreenShare(true)\n    }\n  }\n\n  return (\n    <div className=\"page-wrap twilight\">\n      <div className=\"boxes\">\n        <div className=\"coding_area\">\n          <div className=\"prism-min\">\n            <span className=\"prism-head\">File Explorer</span>\n            <div onClick={() => toggleScreens('html')}>index.html</div>\n            <div onClick={() => toggleScreens('css')}>app.css</div>\n            <div onClick={() => toggleScreens('js')} >index.js</div>\n            <div onClick={() => toggleScreens('all')} >All files</div>\n            <span className=\"prism-head\">Share</span>\n            <div onClick={() => {\n              toggleScreens('share')\n              createPaste()\n            }} >Get Link</div>\n          </div>\n          {\n            screenHtml && <Editor\n              placeholder=\"HTML\"\n              value={html}\n              onValueChange={code => setHtml(code)}\n              highlight={code => highlight(code, languages.jsx)}\n              padding={10}\n              style={{\n                fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n                fontSize: 12,\n                color: 'white',\n                backgroundColor: '#333234'\n              }}\n              className=\"prism\"\n            />\n          }\n          {\n            screenCss && <Editor\n              placeholder=\"CSS\"\n              value={css}\n              onValueChange={code => setCss(code)}\n              highlight={code => highlight(code, languages.css)}\n              padding={10}\n              style={{\n                fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n                fontSize: 12,\n                color: 'white',\n                backgroundColor: '#333234'\n              }}\n              className=\"prism\"\n            />\n          }\n          {\n            screenJs && <Editor\n              placeholder=\"JS\"\n              value={js}\n              onValueChange={code => setJs(code)}\n              highlight={code => highlight(code, languages.js)}\n              padding={10}\n              style={{\n                fontFamily: '\"Fira code\", \"Fira Mono\", monospace',\n                fontSize: 12,\n                color: 'white',\n                backgroundColor: '#333234'\n              }}\n              className=\"prism\"\n            />\n          }\n\n          {\n            screenShare && <div className=\"prism\">\n            </div>\n          }\n\n        </div>\n        <LiveView code={`${html}<style>${css}</style><script>${js}</script>`}>\n        </LiveView>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport FileExplorer from './FileExplorer'\n\nfunction Main() {\n  return (\n    <div>\n      <header className=\"App-header\">\n        <img id=\"logo\" src=\"https://www.dyte.io/images/Dyte-Logo.svg\" alt=\"logo\" />\n      </header>\n      <FileExplorer />\n    </div>\n  )\n}\n\nexport default Main;\n","import './App.css';\nimport Main from './components/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}